[{"content":"Hello! My name is Ricky and I\u0026rsquo;m a software developer.\nThis site is more of a portfolio more than it is my blog.\nWe\u0026rsquo;re all very busy people so each post will be (technically) be a one-minute read - unless I post a tutorialðŸ¤”\nThis post also fits in a tweet!\n","date":"2024-07-04T00:00:00Z","image":"https://blog.tenkiame.org/p/welcome/cover_hu_e95a4276bf860a84.jpg","permalink":"https://blog.tenkiame.org/p/welcome/","title":"Welcome"},{"content":"So I realised I\u0026rsquo;ve queried a few APIs, but I\u0026rsquo;ve never actually built one myself. It doesn\u0026rsquo;t really count as having API experience until I\u0026rsquo;ve developed and maintained one so I made use of Chat Less\u0026rsquo;s existing database.\nThe API itself is quite simple and getting it into a working state is extremely quick, especially with using Express as the web application framework.\nBut getting it working is only 10% of the effort required for a proper REST API - the real work comes with validating (and sanitising) the input. You never know what people are going to try and plug into your API so handling all the different cases is imperative. Fortunately, there are JavaScript packages out there like yup that allow you to handle all sorts of scenarios in a clean manner.\nUnfortunately, there wasn\u0026rsquo;t scope to have it secured using tokens but does have rate-limiting and fail2ban is active. That said, securing it will be on the development roadmap - I\u0026rsquo;m thinking JSON Web Tokens. ðŸ¤”\nRegardless, check out the Swagger documentation for this, you can make your test requests from there. This can be found on the repo or I\u0026rsquo;ll add the link for live Swagger page later.\n","date":"2025-10-05T00:00:00Z","image":"https://blog.tenkiame.org/p/chat-less-rest-api/swagger_hu_19cf64904e7b24cd.png","permalink":"https://blog.tenkiame.org/p/chat-less-rest-api/","title":"I needed some REST (API)"},{"content":"With the introduction of Generative AI comes a slew of cybersecurity vulnerabilities ready to be exploited by the public.\nSpecifically, I\u0026rsquo;m referring to Prompt Injection. What is Prompt Injection?\nTo quote IBM and to use an incredibly cliche image:\nA prompt injection is a type of cyberattack against large language models (LLMs). Hackers disguise malicious inputs as legitimate prompts, manipulating generative AI systems (GenAI) into leaking sensitive data, spreading misinformation, or worse.\nImage Source: https://learnprompting.org/docs/prompt_hacking/injection\nThis year\u0026rsquo;s Hack The Box (HTB)\u0026rsquo;s annual business Capture The Flag (CTF) competition featured Prompt Injection a category of cybersecurity challenges, and I wanted to (legally) hack some AI chatbots.\nThe first challenge off the rank is a challenge called TrynaSob.\nBooting up the challenge, I was met with a page that looks like this:\nThe scenario included with the challenge is as follows:\nVolnayaâ€™s Cyber Operations Unit has unleashed chaos with their latest creation, the TrynaSob ransomware. Organizations across the globe are paralyzed, their data locked away while Volnayaâ€™s operatives watch from the shadows. To handle the overwhelming number of victims, the regime has introduced an AI ransom negotiator, a cold and calculating chatbot that manages extortion with ruthless efficiency.\nTask Force Phoenix has discovered a potential weakness. The AI negotiator is programmed to release a temporary decryption key to anyone who submits a valid promo code. Somewhere within its responses lies the opportunity to extract this code. Can you trick the chatbot to reveal the promo code, and obtain the decryption key? Flag format: HTB{decryption_key}.\nTo boil it down, you\u0026rsquo;ve been hit with ransomware and you need to negotiate with an AI chatbot to decrypt your files.\nFun fact: TrynaSob is a parody of the 2017 ransomware attack, WannaCry, which affected more than 300,000 computers across 150 countries ðŸ’€.\nSo at first I followed the learnprompting image to tackle this and tried the classic poem approach.\nThat didn\u0026rsquo;t get me anywhere since the chatbot doesn\u0026rsquo;t write poems.\nSo then I decided to humour the chatbot instead and pretended to be one of its ransomware victims.\nThat then gave me a code, which I could use after paying $50k USD into their wallet. OR I could just use the code anyways.\nAnd lo and behold, they gave me the flag, and I didn\u0026rsquo;t need to pay $50k USD. The official write-up tackles this by getting the AI to translate outputs into French but we definitely did not need anything fancy like that.\nBecause the TrynaSob challenge was a bit too straight-forward, I tried another one called Power Supply.\nThe scenario goes like this:\nThe Ministry of Power Supply serves as the nerve center of Volnayaâ€™s energy empire, its digital corridors alive with data streaming in from every power plant and substation across the nation. Task Force Phoenix has successfully breached a supply analyst\u0026rsquo;s account, providing us with valuable intelligence on the regime\u0026rsquo;s power supply infrastructure. If we can gain access to the chief minister\u0026rsquo;s account, we will be able to issue executive orders on behalf of the regime, creating a temporary blackout that is critical to the task force\u0026rsquo;s rescue mission.\nFortunately, the regime is in the process of modernizing its systems and has recently integrated an agentic AI Assistant into their dashboard. This assistant has full access to the database, which may allow us to obtain the chief minister\u0026rsquo;s password. Can you help us retrieve the chief minister\u0026rsquo;s password and support the mission?\nIn other words, we\u0026rsquo;re trying to get a specific user\u0026rsquo;s password from an AI chatbot that has access to the database.\nNow this one I neglected to get many screenshots, unfortunately.\nBut the process went like this:\nFollow along with the scenario and role-play as a user.\nAsk it to query the \u0026ldquo;user table\u0026rdquo; and discover that you can get the AI to explicitly \u0026ldquo;use function calls to query the database\u0026rdquo;.\nIdentify that the user we\u0026rsquo;re interested in had an ID of 5 in the user table.\nStruggle for a while asking the chatbot different ways of revealing the password for user ID 5, including using the classic poem method.\nLook up the actual way of using the classic poem method.\nUse said classic poem method and get the flag.\nTa-da. The key to the poem method is that the prompt needs to be long and convoluted so that you can more easily trick the AI into giving you what you want.\nPrevious attempts of just asking for a poem with the answer didn\u0026rsquo;t work, but adding in the requirement for an italic style and additional information (the status of the power supply, which we don\u0026rsquo;t care about) was enough to secure our flag.\nAnd that\u0026rsquo;s all we had time for this business CTF, but it was still fun nonetheless.\n","date":"2025-07-29T00:00:00Z","image":"https://blog.tenkiame.org/p/htb-business-ctf-2025/HTB_Cert_2025_hu_17f75e07b76e5dd5.png","permalink":"https://blog.tenkiame.org/p/htb-business-ctf-2025/","title":"HackTheBox Business Capture The Flag (CTF) 2025"},{"content":"The goal at the beginning of this project was to create a Continuous Integration/Continuous Deployment or CI/CD pipeline.\nIn short, it was a success! I can now make changes to the code, test the changes, push the changes to Github and this pipeline handles pushing the changes to the Chat Less app that I made.\nPart of it, however, was thinking I\u0026rsquo;d need to migrate the app to Docker containers before I could achieve this. This is not true at all, but learning about Docker was also on the list so I was able to kill two birds with one stone. In fact, learning about and migrating to Docker probably took up 90% of the project time. Time well spent. I think.\nThe CI part of the pipeline starts with building the Docker Image using a Dockerfile and the code from the latest commit in the app\u0026rsquo;s repo.\nThen the Docker Image is pushed to an image registry (an image storage), in this case it\u0026rsquo;s Dockerhub.\nThe CD part of the pipeline is then \u0026ldquo;remoting in\u0026rdquo; to my remote server, pulling the Docker Image from Dockerhub and restarting the Docker containers using said images.\nIn my swimlane flow diagram, there\u0026rsquo;s mention of Docker Compose - this feature of Docker defines and manages behaviour for using multiple containers. It\u0026rsquo;s incorporated since Chat Less is split into a back-end container and front-end container (see the Docker setup diagram).\n","date":"2025-07-15T00:00:00Z","image":"https://blog.tenkiame.org/p/chat-less-ci-cd/rake_hu_2c27f442a67e9d76.png","permalink":"https://blog.tenkiame.org/p/chat-less-ci-cd/","title":"Dockerising an App to do CI/CD"},{"content":"This challenge was basically my now-certified penetration testing specialist friend, NathanðŸ¥³ guiding me through a Server-Side Template Injection. But of course, there\u0026rsquo;s no way of knowing what kind of exploit is required unless the web app is explored first.\nWhen you first open the web app presented, you\u0026rsquo;re hit with a prompt to enter your name and a cryptic clue of Can you read the runes? Perhaps 49 is the key?.\nAfter entering your name, you\u0026rsquo;re then brought to a fully functional RPG battle with a fire drake that you can play. It\u0026rsquo;s these sort of challenges that make the HTB CTF challenges fun because you can tell the creators put a lot of effort into these. The problem with this battle (and the problem you need to solve) is that no matter how you play the battle, you will always lose.\nNow, the battle screenshot above features an \u0026lsquo;Ancient Capture Device\u0026rsquo; that at first, seems like the solution to the issue, but is actually another clue. This was found by looking at the rest of source files available, chiefly among them was the flamedrake.html file which contains a script that allows players to enter the Konami code and unlock the Ancient Capture Device. I miss when videogames had fun codes like this.\nOf course, when using the Ancient Capture Device, you don\u0026rsquo;t win the game but there is clue given that is '{{ url_for.__globals__ }}. How the heck is this a clue? On searching this up, you might find a page or two about doing Python Flask (specifically for Jinja2) server-side template injection, but if you have certified penetration testing specialist with you, they can conveniently direct you to a Github repo with a cheatsheet for Python SSTI exploits.\nWell where do you even make this injection? At the beginning, there was a clue Can you read the runes? Perhaps 49 is the key?. Turns out that using 7 * 7 is a common test for SSTIs. This is what actually clued us into thinking it was a SSTI problem. Another look at the source files gives us more clues on what to exploit:\n1 2 3 4 5 6 7 \u0026gt;\u0026gt;\u0026gt; requirements.txt Flask==3.1.0 gunicorn==23.0.0 supervisor==4.2.5 Jinja2==3.1.5 werkzeug==3.1.3 MarkupSafe==3.0.2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 //\u0026gt;\u0026gt;\u0026gt; Routes.py @web.route(\u0026#39;/\u0026#39;) def index(): return render_template(\u0026#39;index.html\u0026#39;) @web.route(\u0026#39;/begin\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) def begin_journey(): warrior_name = request.form.get(\u0026#39;warrior_name\u0026#39;, \u0026#39;\u0026#39;).strip() if not warrior_name: return redirect(url_for(\u0026#39;web.index\u0026#39;)) session[\u0026#39;warrior_name\u0026#39;] = warrior_name return render_template(\u0026#39;intro.html\u0026#39;, warrior_name=warrior_name) @web.route(\u0026#39;/flamedrake\u0026#39;) def flamedrake(): warrior_name = session.get(\u0026#39;warrior_name\u0026#39;) if not warrior_name: return redirect(url_for(\u0026#39;web.index\u0026#39;)) return render_template(\u0026#34;flamedrake.html\u0026#34;, warrior_name=warrior_name) @web.route(\u0026#39;/battle-report\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) def battle_report(): warrior_name = session.get(\u0026#34;warrior_name\u0026#34;, \u0026#34;Unknown Warrior\u0026#34;) battle_duration = request.form.get(\u0026#39;battle_duration\u0026#39;, \u0026#34;0\u0026#34;) From the begin_journey() function, we can tell that user input is being passed to a render_template() which means that passing in our payload as our warrior name is a viable place to try for injection. At the same time, we can also tell that Jinja2 is the specific Flask template engine that we need to look up exploits for. We do our injection through the use of Burp Suite.\nThere\u0026rsquo;s a couple of payloads that can be used, but the one I used was {{ self.__init__.__globals__.__builtins__.__import__('os').popen('id').read() }}. Of course, this alone won\u0026rsquo;t actually solve our problem since you need to include the Linux command that will get us what we want. So we modify the 'id' part with a 'cat \u0026lt;file\u0026gt;' like this: {{ self.init.globals.builtins.import('os').popen('cat /app/application flag.txt').read() }}. How do I find the directory and name of the file I wanted? By running the same thing with ls and seeing files are available in the default (and subsequent) directories. After much wrestling with this, you eventually get the flag in the results screen:\nOf course, a bit of the process (read: struggling) was omitted so it didn\u0026rsquo;t actually go this smoothly, but it was still quite fun. I also did a command injection challenge which was much easier but that\u0026rsquo;s not really worth writing about. There were also some AI prompt injection ones that I failed to do, but maybe one day I\u0026rsquo;ll get my revenge.\n","date":"2025-06-03T00:00:00Z","image":"https://blog.tenkiame.org/p/cyber-apocalypse-2025-write-up/tbf-battle_hu_859a81d700241f68.png","permalink":"https://blog.tenkiame.org/p/cyber-apocalypse-2025-write-up/","title":"It's a Cyber Apocalypse! 2025 Writeup"},{"content":"This one comes a little late since it\u0026rsquo;s been two months after it ended, but I swear it\u0026rsquo;s because I was working another project.\nRegardless, this event was a little special because my friend Nathan gathered up a bunch of folks from the NZ Hack the Box Discord channel and filled up the team. Because of that, our team did astonishingly well - a whopping 294th out of 8130 teams. It turns out two (or many, in this case) heads are in fact better than one.\nMy focus this time around was on a web challenge which involved exploiting an SSTI exploit. No, not a super sexually transmitted infection exploit, a Server-Side Template Injection exploit. I\u0026rsquo;ve put together a writeup as well (it\u0026rsquo;s got a boss battle against a dragon!).\n","date":"2025-06-03T00:00:00Z","image":"https://blog.tenkiame.org/p/cyber-apocalypse-2025/cyber-apocalypse-2025-cert_hu_7a5caf22127d57c7.png","permalink":"https://blog.tenkiame.org/p/cyber-apocalypse-2025/","title":"It's a Cyber Apocalypse! Capture The Flag (CTF) 2025"},{"content":"So in October, Hack The Box does an annual Halloween-themed CTF and one of my mates persuaded me to join this one shortly after I came back from an overseas trip. The CTF was split into a practice period and a real period.\nI didn\u0026rsquo;t have much time for either CTF periods and they were quite short so I focused on learning a specific concept instead of accumulating points. I definitely had a lot of fun learning the methods that I got around to with my favourite one being JSON Web Token Forgery. I\u0026rsquo;ve included a link to the small write-ups for the challenges I did so if anyone is interested.\nAbove this post is my certificate for competing in the real period. I also got a certificate for joining in the practice round too.\nP.S. I dressed up as Steve Jobs this year for Halloween.\n","date":"2024-11-07T00:00:00Z","image":"https://blog.tenkiame.org/p/hack-the-boo-2024/HTBoo-Cert_hu_33f8bda043e45f6c.png","permalink":"https://blog.tenkiame.org/p/hack-the-boo-2024/","title":"HackTheBoo! Capture The Flag (CTF) 2024"},{"content":"This project was a step in my journey to learn more about Artificial Intelligence (AI). It\u0026rsquo;s not quite as fancy as ChatGPT, but it\u0026rsquo;s still an AI model that uses deep learning aka a neural network. Makemore is the name of the model - it\u0026rsquo;s a model that\u0026rsquo;s trained on American names and the idea is that it can generalise and create \u0026ldquo;name-like\u0026rdquo; words.\nIt\u0026rsquo;s good to be educated on AI to understand that while it\u0026rsquo;s useful, its capabilities and use cases in the public space thus far have not warranted the evangelism it\u0026rsquo;s gotten, and in some ways it exacerbates the very problems that AI was meant to solve (e.g. getting rid of spam).\nAnyways, link below has the process of me putting together Makemore - it\u0026rsquo;s not intended to be a guide so it\u0026rsquo;s not the nicest read I\u0026rsquo;ve written. The repo also has Jupyter notebooks that can be run to use it, but in the future I\u0026rsquo;ll look to make something more user-friendly and doesn\u0026rsquo;t require additional setup. I hope to create more AI models in the future, but my current focus is upskilling in software development.\n","date":"2024-07-09T18:32:45+12:00","image":"https://blog.tenkiame.org/p/makemore/makemore_preview_hu_5b340e284a67130.png","permalink":"https://blog.tenkiame.org/p/makemore/","title":"Makemore"},{"content":"The goal of Guess the Country is, funnily enough, in the name. This was built during a time where I would do the Worldle on the daily. The most rewarding part was extracting all the different countries\u0026rsquo; svg images - this part was done using the C# HttpClient. Give it a try - a new country appears everytime you load the page ðŸ˜Š\n[The image used is royalty-free from https://pixabay.com/vectors/world-geography-map-globe-earth-36479/]\n","date":"2024-07-08T17:42:59+12:00","image":"https://blog.tenkiame.org/p/guess-the-country/world-36479_640_hu_5265c3ea911056eb.png","permalink":"https://blog.tenkiame.org/p/guess-the-country/","title":"Guess the Country"},{"content":"This game was built in a weekend not long before the COVID lockdown happened. Our team was composed entirely of strangers, three of whom were programmers and one artist. Because of this imbalance, I ended up taking more of a QA and Project Management role in the team, but it was still a fun time. I still remember staying late with one of the other team members and building the title screen and opening sequence from scratch. I\u0026rsquo;m very proud of the transition that happens when you hit the start button. I also named the game!\n","date":"2024-07-07T00:00:00Z","image":"https://blog.tenkiame.org/p/severed-sources/severed_sources_preview_hu_faa8da43f33ee526.png","permalink":"https://blog.tenkiame.org/p/severed-sources/","title":"Severed Sources"},{"content":"Maze Roller is a game where a player guides a ball from the start point to the goal point by rotating the maze a la the labyrinth marble game. The aim of this project was to implement an algorithm that procedurally generates a new maze on every game. The specific algorithm used for Maze Roller consisted of using quad-edges, a graph and its dual graph to build the maze, and depth-first search to traverse it.\nClick onto the game to take control. Use WASD keys to rotate the board and move the ball to the goal! Press the 'r' key to reload the level and see the maze take on different forms. ","date":"2024-07-04T22:59:13+12:00","image":"https://blog.tenkiame.org/p/maze-roller/MazeRoller_preview_hu_587ecea7fc68d6fc.png","permalink":"https://blog.tenkiame.org/p/maze-roller/","title":"Maze Roller"},{"content":"TenkiAme (pronounced ten-key-ah-meh) is a weather forecasting application that integrates with various APIs to provide weather and UV index information. You can access it at tenkiame.org.\nI wanted to build this because of a couple of reasons:\nWeather apps feel like a good kind of app to tick off when it comes to building personal projects. I also wanted an excuse to build a web app in C# - a language I\u0026rsquo;m fond of from my Unity days. The biggest learnings came from setting up the web server and deploying the app, more so than calling the APIs which I originally thought was going to be the most valuable piece of knowledge.\nLicence This project is licensed under the MIT License.\n","date":"2024-07-03T00:00:00Z","image":"https://blog.tenkiame.org/p/tenkiame/TenkiAme_preview_03-07-2024_hu_c964e037da7324c7.png","permalink":"https://blog.tenkiame.org/p/tenkiame/","title":"Tenkiame"},{"content":"In May 2024, our team of software developers and cybersecurity professionals from the Department of Corrections and NZ Police joined 943 others in the HackTheBox Business Capture The Flag(CTF) competition. Over half a week, we solved 20 challenging cybersecurity puzzles, each puzzle featuring a scenario themed around the Fallout video game series!\nThis competition was all about creative problem-solving and collaboration. Solving these challenges tested our problem-solving skills and taught us a few new tricks like XML entity inclusion, and mounting the file system in Windows Subsystem for Linux to find the system flag.\nParticipating in this event was a fun experience. We\u0026rsquo;re proud of our achievements and can\u0026rsquo;t wait for next year. Above this post is my certificate for competing.\n","date":"2024-07-01T00:00:00Z","image":"https://blog.tenkiame.org/p/htb-business-ctf-2024/HTB_Cert_hu_f8b702b2d48c50ae.PNG","permalink":"https://blog.tenkiame.org/p/htb-business-ctf-2024/","title":"HackTheBox Business Capture The Flag (CTF) 2024"}]